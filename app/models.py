import os
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, ForeignKey, Date, DateTime, MetaData
from sqlalchemy.orm import relationship, sessionmaker, declarative_base
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:159753@localhost/acp_db")
metadata = MetaData()
Base = declarative_base(metadata=metadata)
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password_hash = Column(String, nullable=False)
    is_active = Column(Boolean, default=True)

class Order(Base):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True, index=True)
    external_no = Column(String, unique=True, nullable=False)  # –í–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    loading_city = Column(String, nullable=False)  # –ì–æ—Ä–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ)
    unloading_city = Column(String, nullable=False)  # –ì–æ—Ä–æ–¥ –≤—ã–≥—Ä—É–∑–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ)
    load_date = Column(DateTime, nullable=False)  # –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    unload_date = Column(DateTime, nullable=True)  # –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏
    weight_volume = Column(String, nullable=True)  # –í–µ—Å –∏ –æ–±—ä–µ–º (–≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ)
    vehicle_type = Column(String, nullable=True)  # –¢–∏–ø –¢–°
    loading_types = Column(String, nullable=True)  # –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏/—Ä–∞–∑–≥—Ä—É–∑–∫–∏
    comment = Column(String, nullable=True)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    cargo_name = Column(String, nullable=True)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞
    logistician_name = Column(String, nullable=True)  # –ò–º—è –ª–æ–≥–∏—Å—Ç–∞
    ati_price = Column(Float, nullable=True)  # –¶–µ–Ω–∞ –¥–ª—è –ê–¢–ò
    is_published = Column(Boolean, default=False)  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ª–∏ –≥—Ä—É–∑ –Ω–∞ –ê–¢–ò
    order_type = Column(String, nullable=False)  # –¢–∏–ø –∑–∞—è–≤–∫–∏ (ASSIGNED, AUCTION, FREE)
    bid_price = Column(Float, nullable=True)  # –°—Ç–∞–≤–∫–∞ (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤)
    platform = Column(String, nullable=False)  # –ò—Å—Ç–æ—á–Ω–∏–∫ (TMS, API)
    address = Column(String, nullable=True)  # üÜï –ø–æ–ª–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤—ã–≥—Ä—É–∑–∫–∏

class Logist(Base):
    __tablename__ = "logists"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, unique=True, nullable=False)  # –ò–º—è –ª–æ–≥–∏—Å—Ç–∞
    contact_id = Column(Integer, nullable=False)  # ID –ª–æ–≥–∏—Å—Ç–∞ –≤ ATI

class DistributionRule(Base):
    __tablename__ = 'distribution_rules'

    id = Column(Integer, primary_key=True, index=True)
    loading_city = Column(String, index=True)
    unloading_city = Column(String, index=True)
    logistician = Column(String) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç logistician –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    margin_percent = Column(Float, nullable=True) # –ú–∞—Ä–∂–∞ –≤ %
    auction_margin_percent = Column(Float, nullable=True) # –ú–∞—Ä–∂–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞
    cargo_name = Column(String, nullable=True) # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞
    auto_publish = Column(Boolean, default=False) # –ê–≤—Ç–æ—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    publish_delay = Column(Integer, default=0) # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    payment_days = Column(Integer, default=0) # –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –±/–¥


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
Base.metadata.create_all(engine)