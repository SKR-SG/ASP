import os
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, ForeignKey, Date, DateTime, MetaData
from sqlalchemy.orm import relationship, sessionmaker, declarative_base
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:159753@localhost/acp_db")
metadata = MetaData()
Base = declarative_base(metadata=metadata)
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password_hash = Column(String, nullable=False)
    is_active = Column(Boolean, default=True)

class Request(Base):
    __tablename__ = "requests"

    id = Column(Integer, primary_key=True, index=True)
    platform = Column(String, nullable=False)  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ("TMS", "ATI" –∏ —Ç. –¥.)
    external_no = Column(String, unique=True, nullable=False)
    loading_city_id = Column(Integer, nullable=False)  # –ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏ (ID)
    load_date = Column(DateTime, nullable=False)  # –î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏
    unloading_city_id = Column(Integer, nullable=False)  # –ì–æ—Ä–æ–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (ID)
    unload_date = Column(DateTime, nullable=True)  # –î–∞—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    weight_volume = Column(String, nullable=True)  # –í–µ—Å –∏ –æ–±—ä–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "20 —Ç / 90 –º¬≥"
    vehicle_type = Column(String, nullable=True)  # –¢–∏–ø –¢–°
    loading_types = Column(String, nullable=True)  # –¢–∏–ø—ã –ø–æ–≥—Ä—É–∑–∫–∏/—Ä–∞–∑–≥—Ä—É–∑–∫–∏
    order_type = Column(String, nullable=False)  # üîπ –¢–∏–ø –∑–∞—è–≤–∫–∏: "ASSIGNED", "AUCTION", "FREE"
    bid_price = Column(Float, nullable=True)  # üîπ —Å—Ç–∞–≤–∫–∞ –∑–∞–≤–æ–¥ –ª–∏–±–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è
    comment = Column(String, nullable=True)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ
    cargo_name = Column(String, nullable=True)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    logistician_id = Column(Integer, nullable=False)  # ID –ª–æ–≥–∏—Å—Ç–∞
    ati_price = Column(Float, nullable=True)  # –¶–µ–Ω–∞ –¥–ª—è –ê–¢–ò
    is_published = Column(Boolean, default=False)  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ª–∏ –∑–∞—è–≤–∫–∞


class Logist(Base):
    __tablename__ = "logists"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, unique=True, nullable=False)  # –ò–º—è –ª–æ–≥–∏—Å—Ç–∞
    contact_id = Column(Integer, nullable=False)  # ID –ª–æ–≥–∏—Å—Ç–∞ –≤ ATI

class DistributionRule(Base):
    __tablename__ = "distribution_rules"

    id = Column(Integer, primary_key=True)
    loading_city_id = Column(Integer, nullable=True)  # None = –ª—é–±–æ–π –≥–æ—Ä–æ–¥
    unloading_city_id = Column(Integer, nullable=True)
    logist_id = Column(Integer, nullable=False)  # ID –ª–æ–≥–∏—Å—Ç–∞
    margin_percent = Column(Float, nullable=True)  # –ú–∞—Ä–∂–∞ –≤ %
    auction_margin_percent = Column(Float, nullable=True)  # –ú–∞—Ä–∂–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞
    cargo_name = Column(String, nullable=True)  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞
    auto_publish = Column(Boolean, default=False)  # –ê–≤—Ç–æ—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    publish_delay = Column(Integer, default=0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
Base.metadata.create_all(engine)