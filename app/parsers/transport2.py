import os
import requests
import json
from datetime import datetime, timezone
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Float
from sqlalchemy.orm import sessionmaker, declarative_base
from dotenv import load_dotenv
from app.models import Request, DistributionRule  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
from app.ati_client import publish_cargo  # –ò–º–ø–æ—Ä—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ê–¢–ò
from app.ati_client import get_city_id  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥–æ—Ä–æ–¥–∞
from app.distribution_rules import distribute_order  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# API URL –∏ –¢–æ–∫–µ–Ω
T2_API_TOKEN = os.getenv("T2_API_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not T2_API_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: T2_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit()

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Authorization": f"Token {T2_API_TOKEN}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

# URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫
ASSIGNED_ORDERS_URL = "https://api.transport2.ru/carrier/graphql?operation=assignedOrders"
AUCTION_ORDERS_URL = "https://api.transport2.ru/carrier/graphql?operation=auctionNewOrders"
FREE_ORDERS_URL = "https://api.transport2.ru/carrier/graphql?operation=freeOrders"

# –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤
assigned_payload = {
    "query": """
        query {
            assignedOrders {
                id
                externalNo
                loadingPlaces {
                    storagePoint {
                        settlement
                        address
                    }
                }
                unloadingPlaces {
                    storagePoint {
                        settlement
                        address
                    }
                }
                loadingDatetime
                unloadingDatetime
                weight
                volume
                loadingTypes
                comment
                price
                status
                vehicleRequirements {
                    name
                    bodySubtype {
                        name
                    }
                }
            }
        }
    """
}

auction_payload = {
    "query": """
        query {
            auctionOrders {
                id
                externalNo
                loadingPlaces {
                    storagePoint {
                        settlement
                        address
                    }
                }
                unloadingPlaces {
                    storagePoint {
                        settlement
                        address
                    }
                }
                loadingDatetime
                unloadingDatetime
                weight
                volume
                loadingTypes
                comment
                status
                lot {
                    auctionStatus
                    startPrice
                    lastBet
                }
                vehicleRequirements {
                    name
                    bodySubtype {
                        name
                    }
                }
            }
        }
    """
}

free_payload = {
    "query": """
        query {
            freeOrders {
                id
                externalNo
                loadingPlaces {
                    storagePoint {
                        settlement
                        address
                    }
                }
                unloadingPlaces {
                    storagePoint {
                        settlement
                        address
                    }
                }
                loadingDatetime
                unloadingDatetime
                weight
                volume
                loadingTypes
                comment
                price
                status
                vehicleRequirements {
                    name
                    bodySubtype {
                        name
                    }
                }
            }
        }
    """
}

def fetch_orders(url, payload):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∏–∑ TMS API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        response = requests.post(url, headers=HEADERS, json=payload)
        response.raise_for_status()
        return response.json().get("data", {})
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
        return {}

def process_orders():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫"""
    assigned_orders = fetch_orders(ASSIGNED_ORDERS_URL, assigned_payload).get("assignedOrders", [])
    auction_orders = fetch_orders(AUCTION_ORDERS_URL, auction_payload).get("auctionOrders", [])
    free_orders = fetch_orders(FREE_ORDERS_URL, free_payload).get("freeOrders", [])

    # **–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π**
    assigned_orders = filter_valid_orders(assigned_orders, "ASSIGNED")
    auction_orders = filter_valid_orders(auction_orders, "AUCTION")
    free_orders = filter_valid_orders(free_orders, "FREE")

    all_orders = (
        [(order, "ASSIGNED") for order in assigned_orders] +
        [(order, "AUCTION") for order in auction_orders] +
        [(order, "FREE") for order in free_orders]
    )

    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {len(all_orders)}")
    for order, order_type in all_orders:
        process_order(order, order_type)  # üîπ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º `order_type`
    
def filter_valid_orders(orders, order_type):
    """–§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏"""
    current_datetime = datetime.now(timezone.utc)

    valid_orders = []
    for order in orders:
        load_date = order.get("loadingDatetime")
        if not load_date:
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏ –≤ UTC –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        load_datetime = datetime.fromisoformat(load_date)
        if load_datetime < current_datetime:
            continue

        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫
        if order_type == "AUCTION":
            if order.get("status") != "FREE" or order.get("lot", {}).get("auctionStatus") != "ACTIVE":
                continue
        elif order_type == "FREE":
            if order.get("status") != "FREE":
                continue
        elif order_type == "ASSIGNED":
            if order.get("status") != "ASSIGNED":
                continue

        valid_orders.append(order)

    return valid_orders

def process_order(order, order_type):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    external_no = order.get("externalNo", "N/A")

    # –ì–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏ –∏ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    loading_place = order.get("loadingPlaces", [{}])[0].get("storagePoint", {})
    unloading_place = order.get("unloadingPlaces", [{}])[0].get("storagePoint", {})
    loading_city = loading_place.get("settlement", "N/A")
    unloading_city = unloading_place.get("settlement", "N/A")

    # –î–∞—Ç—ã
    load_date = order.get("loadingDatetime", "N/A")
    unload_date = order.get("unloadingDatetime", "N/A")
    
    # –í–µ—Å –∏ –æ–±—ä–µ–º
    weight = order.get("weight", 0)
    volume = order.get("volume", 0)
    weight_volume = f"{weight} —Ç / {volume} –º¬≥"

    vehicle_type = order.get("vehicleRequirements", {}).get("name", "N/A") # –¢–∏–ø –¢–°
    loading_types = order.get("loadingTypes", "N/A")  # –¢–∏–ø—ã –ø–æ–≥—Ä—É–∑–∫–∏/—Ä–∞–∑–≥—Ä—É–∑–∫–∏
    comment = order.get("comment", "N/A")  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ
    
     # –°—Ç–∞–≤–∫–∞ –∑–∞–≤–æ–¥–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞
    factory_bid = order.get("price", 0) if order_type in ["ASSIGNED", "FREE"] else None
    last_bet = order.get("lot", {}).get("lastBet", None) if order_type == "AUCTION" else None
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ `last_bet`, –∏–Ω–∞—á–µ `factory_bid`
    bid_price = last_bet if last_bet else factory_bid

    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_city_id = get_city_id(order.get("loading_city", ""))
    unloading_city_id = get_city_id(order.get("unloading_city", ""))

    if loading_city_id is None or unloading_city_id is None:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {order.get('loading_city')} –∏–ª–∏ –≤—ã–≥—Ä—É–∑–∫–∏ {order.get('unloading_city')}")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    cargo_name = session.query(DistributionRule.cargo_name).filter_by(
        loading_city_id=loading_city_id, unloading_city_id=unloading_city_id
    ).scalar()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
#    distribution = distribute_order({
#        "loading_city_id": loading_city_id,
#        "unloading_city_id": unloading_city_id,
#        "factory_bid": factory_rate,
#        "auction_bid": auction_rate
#    }, session)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∞ –∏ ATI-—Ü–µ–Ω—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
#    logist_id = distribution["logist_id"] if distribution else None
#    ati_price = distribution["ati_price"] if distribution else None
      
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∂—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    margin_percent = session.query(DistributionRule.margin_percent).filter_by(
        loading_city_id=loading_city_id, unloading_city_id=unloading_city_id
    ).scalar() or 0  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, —Å—Ç–∞–≤–∏–º 0%

    auction_margin_percent = session.query(DistributionRule.auction_margin_percent).filter_by(
        loading_city_id=loading_city_id, unloading_city_id=unloading_city_id
    ).scalar() or 0  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, —Å—Ç–∞–≤–∏–º 0%

     # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞–≤–∫–∏
    rate_factory = order.get("price", 0)  # –°—Ç–∞–≤–∫–∞ –∑–∞–≤–æ–¥–∞
    rate_auction = order.get("lot", {}).get("lastBet", 0)  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞

     # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º `ati_price`
    ati_price = None
    if order_type == "AUCTION":
        ati_price = last_bet * (100 - auction_margin_percent) / 100 if auction_margin_percent else None
    else:
        ati_price = factory_bid * (100 - margin_percent) / 100 if margin_percent else None

    # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ–≥–∏—Å—Ç–∞
    logist_id = session.query(DistributionRule.logist_id).filter_by(
        loading_city_id=loading_city_id, unloading_city_id=unloading_city_id
    ).scalar()

    # –ï—Å–ª–∏ –ª–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if logist_id is None:
        print(f"‚ö†Ô∏è –ì—Ä—É–∑ {external_no} –Ω–µ –ø–æ–ø–∞–ª –ø–æ–¥ –ø—Ä–∞–≤–∏–ª–æ. –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        logist_id = 1  # <-- –£–∫–∞–∑—ã–≤–∞–µ–º ID –ª–æ–≥–∏—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_request({
        "external_no": external_no,
        "platform": "TMS",
        "load_date": load_date,
        "loading_city_id": loading_city_id,
        "unloading_city_id": unloading_city_id,
        "unload_date": unload_date,
        "weight_volume": weight_volume,
        "vehicle_type": vehicle_type,
        "loading_types": loading_types,
        "comment": comment,
        "cargo_name": cargo_name,
        "logistician_id": logist_id,
        "ati_price": ati_price,
        "is_published": False,
        "order_type": order_type,
        "bid_price": bid_price  # üîπ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–æ–¥–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞)
    })

def save_request(request_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î"""
    existing_request = session.query(Request).filter_by(external_no=request_data["external_no"]).first()
    
    if existing_request:
        for key, value in request_data.items():
            setattr(existing_request, key, value)
    else:
        new_request = Request(**request_data)
        session.add(new_request)

    session.commit()

if __name__ == "__main__":
    process_orders()