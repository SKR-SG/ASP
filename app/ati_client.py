import json
import os
import requests
import time
from dotenv import load_dotenv
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from app.models import Logist, Order  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from app.database import SessionLocal

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

ATI_API_BASE_URL = "https://api.ati.su"
ATI_API_TOKEN = os.getenv("ATI_API_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!

HEADERS = {
    "Authorization": f"Bearer {ATI_API_TOKEN}",
    "Content-Type": "application/json"
}

def get_car_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–æ–≤ —Å ATI"""
    url = f"{ATI_API_BASE_URL}/v1.0/dictionaries/carTypes"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        car_types = response.json()
        return {item["Name"].lower(): item["TypeId"] for item in car_types}
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ carTypes: {response.status_code}, {response.text}")
    return {}

def get_loading_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Å ATI"""
    url = f"{ATI_API_BASE_URL}/v1.0/dictionaries/loadingTypes"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        loading_types = response.json()
        return {item["Name"].lower(): item["Id"] for item in loading_types}
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ loadingTypes: {response.status_code}, {response.text}")
    return {}

def get_unloading_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–ø–æ—Å–æ–±–æ–≤ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ —Å ATI"""
    url = f"{ATI_API_BASE_URL}/v1.0/dictionaries/unloadingTypes"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        unloading_types = response.json()
        return {item["Name"].lower(): item["Id"] for item in unloading_types}
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ unloadingTypes: {response.status_code}, {response.text}")
    return {}

def get_city_id(city_name):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ API ATI."""
    url = f"{ATI_API_BASE_URL}/gw/gis-dict/v1/autocomplete/suggestions"
    payload = {
        "prefix": city_name,
        "suggestion_types": 1,  
        "limit": 1,
        "country_id": 1  
    }

    response = requests.post(url, json=payload, headers=HEADERS)
    data = response.json()
    
    if response.status_code == 200 and "suggestions" in data and data["suggestions"]:
        city_id = data["suggestions"][0]["city"]["id"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID –≥–æ—Ä–æ–¥–∞ {city_name}: {city_id}")
        return city_id
    else:
        print(f"üö® –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}")
        return None

def get_contact_id(logist_name):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ª–æ–≥–∏—Å—Ç–∞ –∏–∑ –ë–î –∏–ª–∏ API ATI."""
    session = SessionLocal()
    logist = session.query(Logist).filter(Logist.name.ilike(f"%{logist_name}%")).first()
    session.close()

    if logist:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID –ª–æ–≥–∏—Å—Ç–∞ {logist.name} –≤ –ë–î: {logist.contact_id}")
        return logist.contact_id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API ATI
    url = f"{ATI_API_BASE_URL}/v1.0/firms/contacts"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        contacts = response.json()
        for contact in contacts:
            if logist_name.lower() in contact["name"].lower():
                return contact["id"]
    
    print(f"‚ùå –õ–æ–≥–∏—Å—Ç {logist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ATI!")
    return None

def publish_cargo(cargo_data):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –≥—Ä—É–∑ –≤ ATI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç cargo_id –∏ cargo_number –≤ –ë–î"""
    url = f"{ATI_API_BASE_URL}/v2/cargos"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ ID –ø–µ—Ä–µ–¥–∞–Ω—ã
    if not cargo_data["loading_city_id"] or not cargo_data["unloading_city_id"]:
        return {"error": "–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ID –≥–æ—Ä–æ–¥–æ–≤"}

    if cargo_data["logist_id"] is None or cargo_data["logist_id"] == "":
        return {"error": "–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ID –ª–æ–≥–∏—Å—Ç–∞"}

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ `load_date`
    load_dates = {
        "type": "from-date",
        "time": {
            "type": "bounded",
            "start": cargo_data["loading_dates"]["time"]["start"],
            "end": cargo_data["loading_dates"]["time"]["end"],
            "offset": "+00:00"
        },
        "first_date": cargo_data["loading_dates"]["first_date"],
        "last_date": cargo_data["loading_dates"]["last_date"]
    }

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ `unload_date`
    unload_dates = {
        "first_date": cargo_data["unloading_dates"]["first_date"],
        "last_date": cargo_data["unloading_dates"]["last_date"],
        "time": {
            "type": "bounded" if cargo_data["unloading_dates"]["time"]["start"] else "round-the-clock",
            "start": cargo_data["unloading_dates"]["time"]["start"],
            "end": cargo_data["unloading_dates"]["time"]["end"],
            "offset": "+00:00"
        }
    } if cargo_data["unloading_dates"]["first_date"] else None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º

    # üÜï –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É `truck`
    truck_data = {
        "load_type": "ftl",
        "body_types": cargo_data["body_types"],
        "body_loading": {"types": cargo_data["body_loading"], "is_all_required": True},
        "body_unloading": {"types": cargo_data["body_unloading"], "is_all_required": True}
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    payload = {
        "cargo_application": {
            "route": {
                "loading": {
                    "city_id": cargo_data["loading_city_id"],
                    "address": cargo_data["loading_address"],
                    "dates": load_dates,  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
                    "cargos": [
                        {
                            "id": 1,
                            "name": cargo_data["cargo_name"],
                            "weight": {"type": "tons", "quantity": cargo_data["weight"]},
                            "volume": {"quantity": cargo_data["volume"]}
                        }
                    ]
                },
                "unloading": {
                    "city_id": cargo_data["unloading_city_id"],
                    "address": cargo_data["unloading_address"],
                    "dates": unload_dates  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                } if unload_dates else {"city_id": cargo_data["unloading_city_id"], "address": cargo_data["unloading_address"]}  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫
            },
            "truck": truck_data,  # üÜï –¢–µ–ø–µ—Ä—å `truck` —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç—É—Ç
            "payment": cargo_data["payment"],
            "boards": [{"id": "a0a0a0a0a0a0a0a0a0a0a0a0", "publication_mode": "now"}],
            "note": cargo_data["note"],
            "contacts": [cargo_data["logist_id"]],
        }
    }

    response = requests.post(url, json=payload, headers=HEADERS)

    if response.status_code == 200:
        data = response.json()
        cargo_id = data["cargo_application"]["cargo_id"]
        cargo_number = data["cargo_application"]["cargo_number"]
        print(f"‚úÖ –ì—Ä—É–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: {cargo_id}, –ù–æ–º–µ—Ä: {cargo_number}")
        
    
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        db = SessionLocal()
        order = db.query(Order).filter(Order.external_no == cargo_data["external_id"]).first()
        if order:
            order.cargo_id = str(cargo_id)  # üõ†Ô∏è –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
            order.is_published = str(cargo_number)  # üõ†Ô∏è –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
            db.commit()
        db.close()    
        
        return {"cargo_id": cargo_id, "cargo_number": cargo_number}

    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}, {response.text}")
    return response.json()

def update_cargo(cargo_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≥—Ä—É–∑–∞ –Ω–∞ ATI"""
    
    if not cargo_data["cargo_id"]:
        print(f"‚ùå –û—à–∏–±–∫–∞: –£ –≥—Ä—É–∑–∞ {cargo_data['external_id']} –Ω–µ—Ç cargo_id, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return {"error": "cargo_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"}

    url = f"{ATI_API_BASE_URL}/v2/cargos/{cargo_data['cargo_id']}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ ID –ø–µ—Ä–µ–¥–∞–Ω—ã
    if not cargo_data["loading_city_id"] or not cargo_data["unloading_city_id"]:
        return {"error": "–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ID –≥–æ—Ä–æ–¥–æ–≤"}

    if cargo_data["logist_id"] is None or cargo_data["logist_id"] == "":
        return {"error": "–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ID –ª–æ–≥–∏—Å—Ç–∞"}

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ `load_date`
    load_dates = {
        "type": "from-date",
        "time": {
            "type": "bounded",
            "start": cargo_data["loading_dates"]["time"]["start"],
            "end": cargo_data["loading_dates"]["time"]["end"],
            "offset": "+00:00"
        },
        "first_date": cargo_data["loading_dates"]["first_date"],
        "last_date": cargo_data["loading_dates"]["last_date"]
    }

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ `unload_date`
    unload_dates = {
        "first_date": cargo_data["unloading_dates"]["first_date"],
        "last_date": cargo_data["unloading_dates"]["last_date"],
        "time": {
            "type": "bounded" if cargo_data["unloading_dates"]["time"]["start"] else "round-the-clock",
            "start": cargo_data["unloading_dates"]["time"]["start"],
            "end": cargo_data["unloading_dates"]["time"]["end"],
            "offset": "+00:00"
        }
    } if cargo_data["unloading_dates"]["first_date"] else None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º

    # üÜï –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É `truck`
    truck_data = {
        "load_type": "ftl",
        "body_types": cargo_data["body_types"],
        "body_loading": {"types": cargo_data["body_loading"], "is_all_required": True},
        "body_unloading": {"types": cargo_data["body_unloading"], "is_all_required": True}
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    payload = {
        "cargo_application": {
            "route": {
                "loading": {
                    "city_id": cargo_data["loading_city_id"],
                    "address": cargo_data["loading_address"],
                    "dates": load_dates,  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
                    "cargos": [
                        {
                            "id": 1,
                            "name": cargo_data["cargo_name"],
                            "weight": {"type": "tons", "quantity": cargo_data["weight"]},
                            "volume": {"quantity": cargo_data["volume"]}
                        }
                    ]
                },
                "unloading": {
                    "city_id": cargo_data["unloading_city_id"],
                    "address": cargo_data["unloading_address"],
                    "dates": unload_dates  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                } if unload_dates else {"city_id": cargo_data["unloading_city_id"], "address": cargo_data["unloading_address"]}  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫
            },
            "truck": truck_data,  # üÜï –¢–µ–ø–µ—Ä—å `truck` —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç—É—Ç
            "payment": cargo_data["payment"],
            "boards": [{"id": "a0a0a0a0a0a0a0a0a0a0a0a0", "publication_mode": "now"}],
            "note": cargo_data["note"],
            "contacts": [cargo_data["logist_id"]],
        }
    }

    response = requests.put(url, json=payload, headers=HEADERS)

    if response.status_code == 200:
        print(f"‚úÖ –ì—Ä—É–∑ {cargo_data['cargo_id']} ({cargo_data['external_id']}) –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return response.json()

    elif response.status_code == 429:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429. –ü—Ä–µ–≤—ã—à–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (5000) –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞. –î–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
        return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (5000) –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"}

    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {cargo_data['cargo_id']}: {response.status_code}, {response.text}")
        return response.json()

def delete_cargo(order):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≥—Ä—É–∑–∞ –Ω–∞ ATI"""
    if not order.cargo_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: –£ –∑–∞—è–≤–∫–∏ {order.external_no} –Ω–µ—Ç cargo_id, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return {"error": "cargo_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"}

    url = f"{ATI_API_BASE_URL}/v1.0/loads/{order.cargo_id}"

    response = requests.delete(url, headers=HEADERS)

    if response.status_code == 200:
        print(f"‚úÖ –ì—Ä—É–∑ {order.cargo_id} ({order.external_no}) —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        db = SessionLocal()
        order_in_db = db.query(Order).filter(Order.external_no == order.external_no).first()
        if order_in_db:
            order_in_db.cargo_id = None
            order_in_db.is_published = None
            db.commit()
        db.close()

        return response.json()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {order.cargo_id}: {response.status_code}, {response.text}")
        return response.json()
