import os
import requests
from dotenv import load_dotenv
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from app.models import Logist, Order  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

ATI_API_BASE_URL = "https://api.ati.su"
ATI_API_TOKEN = os.getenv("ATI_API_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!

HEADERS = {
    "Authorization": f"Bearer {ATI_API_TOKEN}",
    "Content-Type": "application/json"
}

def get_car_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–æ–≤ —Å ATI"""
    url = f"{ATI_API_BASE_URL}/v1.0/dictionaries/carTypes"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        car_types = response.json()
        return {item["Name"].lower(): item["TypeId"] for item in car_types}
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ carTypes: {response.status_code}, {response.text}")
    return {}

def get_loading_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Å ATI"""
    url = f"{ATI_API_BASE_URL}/v1.0/dictionaries/loadingTypes"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        loading_types = response.json()
        return {item["Name"].lower(): item["Id"] for item in loading_types}
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ loadingTypes: {response.status_code}, {response.text}")
    return {}

def get_unloading_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–ø–æ—Å–æ–±–æ–≤ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ —Å ATI"""
    url = f"{ATI_API_BASE_URL}/v1.0/dictionaries/unloadingTypes"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        unloading_types = response.json()
        return {item["Name"].lower(): item["Id"] for item in unloading_types}
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ unloadingTypes: {response.status_code}, {response.text}")
    return {}

def get_city_id(city_name):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ API ATI."""
    url = f"{ATI_API_BASE_URL}/gw/gis-dict/v1/autocomplete/suggestions"
    payload = {
        "prefix": city_name,
        "suggestion_types": 1,  
        "limit": 1,
        "country_id": 1  
    }

    response = requests.post(url, json=payload, headers=HEADERS)
    data = response.json()
    
    if response.status_code == 200 and "suggestions" in data and data["suggestions"]:
        city_id = data["suggestions"][0]["city"]["id"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID –≥–æ—Ä–æ–¥–∞ {city_name}: {city_id}")
        return city_id
    else:
        print(f"üö® –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}")
        return None

def get_contact_id(logist_name):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ª–æ–≥–∏—Å—Ç–∞ –∏–∑ –ë–î –∏–ª–∏ API ATI."""
    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
    logist = session.query(Logist).filter(Logist.name.ilike(f"%{logist_name}%")).first()
    if logist:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID –ª–æ–≥–∏—Å—Ç–∞ {logist.name} –≤ –ë–î: {logist.contact_id}")
        return logist.contact_id
    
    # 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API ATI
    url = f"{ATI_API_BASE_URL}/v1.0/firms/contacts"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        contacts = response.json()
        for contact in contacts:
            if logist_name.lower() in contact["name"].lower():
                new_logist = Logist(name=contact["name"], contact_id=contact["id"])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                session.add(new_logist)
                session.commit()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥–∏—Å—Ç {contact['name']} –≤ –ë–î, ID: {contact['id']}")
                return contact["id"]
    
    print(f"‚ùå –õ–æ–≥–∏—Å—Ç {logist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return None

def publish_cargo(cargo_data):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –≥—Ä—É–∑ –≤ ATI.SU."""
    url = f"{ATI_API_BASE_URL}/v2/cargos"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ ID –ø–µ—Ä–µ–¥–∞–Ω—ã
    if not cargo_data["loading_city_id"] or not cargo_data["unloading_city_id"]:
        return {"error": "–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ID –≥–æ—Ä–æ–¥–æ–≤"}

    if not cargo_data["logist_id"]:
        return {"error": "–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ID –ª–æ–≥–∏—Å—Ç–∞"}

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ `load_date`
    load_dates = {
        "type": "from-date",
        "time": {
            "type": "bounded",
            "start": cargo_data["loading_dates"]["time"]["start"],
            "end": cargo_data["loading_dates"]["time"]["end"],
            "offset": "+00:00"
        },
        "first_date": cargo_data["loading_dates"]["first_date"],
        "last_date": cargo_data["loading_dates"]["last_date"]
    }

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ `unload_date`
    unload_dates = {
        "first_date": cargo_data["unloading_dates"]["first_date"],
        "last_date": cargo_data["unloading_dates"]["last_date"],
        "time": {
            "type": "bounded" if cargo_data["unloading_dates"]["time"]["start"] else "round-the-clock",
            "start": cargo_data["unloading_dates"]["time"]["start"],
            "end": cargo_data["unloading_dates"]["time"]["end"],
            "offset": "+00:00"
        }
    } if cargo_data["unloading_dates"]["first_date"] else None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º

    # üÜï –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É `truck`
    truck_data = {
        "load_type": "ftl",
        "body_types": cargo_data["body_types"],
        "body_loading": {"types": cargo_data["body_loading"], "is_all_required": True},
        "body_unloading": {"types": cargo_data["body_unloading"], "is_all_required": True}
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    payload = {
        "cargo_application": {
            "route": {
                "loading": {
                    "city_id": cargo_data["loading_city_id"],
                    "address": cargo_data["loading_address"],
                    "dates": load_dates,  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
                    "cargos": [
                        {
                            "id": 1,
                            "name": cargo_data["cargo_name"],
                            "weight": {"type": "tons", "quantity": cargo_data["weight"]},
                            "volume": {"quantity": cargo_data["volume"]}
                        }
                    ]
                },
                "unloading": {
                    "city_id": cargo_data["unloading_city_id"],
                    "address": cargo_data["unloading_address"],
                    "dates": unload_dates  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                } if unload_dates else {"city_id": cargo_data["unloading_city_id"], "address": cargo_data["unloading_address"]}  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫
            },
            "truck": truck_data,  # üÜï –¢–µ–ø–µ—Ä—å `truck` —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç—É—Ç
            "payment": cargo_data["payment"],
            "boards": [{"id": "a0a0a0a0a0a0a0a0a0a0a0a0", "publication_mode": "now"}],
            "note": cargo_data["note"],
            "contacts": [cargo_data["logist_id"]]
        }
    }

    response = requests.post(url, json=payload, headers=HEADERS)

    if response.status_code == 200:
        data = response.json()
        cargo_id = data["cargo_application"]["cargo_id"]
        cargo_number = data["cargo_application"]["cargo_number"]
        print(f"‚úÖ –ì—Ä—É–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: {cargo_id}, –ù–æ–º–µ—Ä: {cargo_number}")
        return {"cargo_id": cargo_id, "cargo_number": cargo_number}

    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}")
    return response.json()

def update_cargo(order_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ ATI"""
    order = session.query(Order).filter_by(id=order_id).first()
    if not order or not order.is_published:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        return
    
    payload = {
        "cargo_application": {
            "external_id": str(order.external_no),
            "route": {
                "loading": {
                    "city_id": order.loading_city,
                    "address": order.loading_address
                },
                "unloading": {
                    "city_id": order.unloading_city,
                    "address": order.unloading_address
                }
            },
            "truck": {
                "load_type": "ftl",
                "body_types": [200]
            },
            "payment": {
                "type": "rate-request"
            },
            "boards": [{"id": "a0a0a0a0a0a0a0a0a0a0a0a0", "publication_mode": "now"}],
            "contacts": [order.logistician_name]
        }
    }

    response = requests.put(f"{ATI_API_BASE_URL}/v2/cargos/{order.is_published}", json=payload, headers=HEADERS)
    if response.status_code == 200:
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {order_id}: {response.status_code} - {response.text}")

def delete_cargo(order_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å ATI"""
    order = session.query(Order).filter_by(id=order_id).first()
    if not order or not order.is_published:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        return
    
    response = requests.delete(f"{ATI_API_BASE_URL}/v2/cargos/{order.is_published}", headers=HEADERS)
    if response.status_code == 200:
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å ATI!")
        order.is_published = None  # –û–±–Ω—É–ª—è–µ–º —Ñ–ª–∞–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        session.commit()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {order_id}: {response.status_code} - {response.text}")
