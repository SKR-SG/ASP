import os
import math
import re
from datetime import datetime
from app.models import DistributionRule
from app.ati_client import get_city_id, get_contact_id, get_car_types, get_loading_types, get_unloading_types
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
car_type_dict = get_car_types()
loading_type_dict = get_loading_types()
unloading_type_dict = get_unloading_types()

def prepare_order_for_ati(order):
    """–ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ê–¢–ò"""

    # üÜï –ü–æ–∏—Å–∫ ID —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    body_types = [200]  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    for key, type_id in car_type_dict.items():
        if key in order.vehicle_type.lower():
            body_types = [type_id]
            break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

    print(f"DEBUG: vehicle_type={order.vehicle_type}, body_types={body_types}")

    # üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ loading_types (—Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ body_loading –∏ body_unloading)
    loading_list = [lt.strip().lower() for lt in order.loading_types.split(",")]

    body_loading = []
    body_unloading = []

    for i, lt in enumerate(loading_list):
        if lt == "–ø–æ–ª–Ω–∞—è —Ä–∞—Å—Ç–µ–Ω—Ç–æ–≤–∫–∞":
            # –ï—Å–ª–∏ "–ü–æ–ª–Ω–∞—è —Ä–∞—Å—Ç–µ–Ω—Ç–æ–≤–∫–∞" —Å—Ç–æ–∏—Ç –ø–µ—Ä–≤–æ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ `body_loading`
            if i == 0:
                if "–≤–µ—Ä—Ö–Ω—è—è" in loading_type_dict:
                    body_loading.append(loading_type_dict["–≤–µ—Ä—Ö–Ω—è—è"])
                if "–±–æ–∫–æ–≤–∞—è" in loading_type_dict:
                    body_loading.append(loading_type_dict["–±–æ–∫–æ–≤–∞—è"])
            else:
                # –ï—Å–ª–∏ "–ü–æ–ª–Ω–∞—è —Ä–∞—Å—Ç–µ–Ω—Ç–æ–≤–∫–∞" —Å—Ç–æ–∏—Ç –ù–ï –ø–µ—Ä–≤–æ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ `body_unloading`
                if "–≤–µ—Ä—Ö–Ω—è—è" in unloading_type_dict:
                    body_unloading.append(unloading_type_dict["–≤–µ—Ä—Ö–Ω—è—è"])
                if "–±–æ–∫–æ–≤–∞—è" in unloading_type_dict:
                    body_unloading.append(unloading_type_dict["–±–æ–∫–æ–≤–∞—è"])
        elif i == 0:  
            # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ `body_loading`, –µ—Å–ª–∏ –æ–Ω –Ω–µ "–ü–æ–ª–Ω–∞—è —Ä–∞—Å—Ç–µ–Ω—Ç–æ–≤–∫–∞"
            if lt in loading_type_dict:
                body_loading.append(loading_type_dict[lt])
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ `body_unloading`
            if lt in unloading_type_dict:
                body_unloading.append(unloading_type_dict[lt])

    print(f"DEBUG: loading_types={order.loading_types}, body_loading={body_loading}, body_unloading={body_unloading}")         

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –∏ –æ–±—ä–µ–º
    weight = math.ceil(float(order.weight_volume.split(" —Ç")[0]) * 10) / 10
    # –ò–∑–≤–ª–µ–∫–∞–µ–º `volume`
    match = re.search(r"(\d+)\s*–º3", order.vehicle_type)
    if match:
        volume = int(match.group(1))  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "–º3"
    else:
        # –ï—Å–ª–∏ "–º3" –Ω–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ
        numbers = re.findall(r"\d+", order.vehicle_type)
        volume = int(numbers[-1]) if numbers else 0

    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–æ–≤
    loading_city_id = get_city_id(order.loading_city)
    unloading_city_id = get_city_id(order.unloading_city)

    # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ–≥–∏—Å—Ç–∞
    logist_id = get_contact_id(order.logistician_name)
    
    # –ë–µ—Ä–µ–º `ati_price` –∏–∑ `orders`
    ati_price = order.ati_price

    # –ü–æ–ª—É—á–∞–µ–º `payment_days` –∏–∑ `distribution_rules`
    rule = session.query(DistributionRule).filter(
        (DistributionRule.loading_city == order.loading_city) | (DistributionRule.loading_city.is_(None)),
        (DistributionRule.unloading_city == order.unloading_city) | (DistributionRule.unloading_city.is_(None))
    ).first()
    payment_days = rule.payment_days if rule and rule.payment_days else 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π

    # üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —É –¥–∞—Ç—ã, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ `datetime`, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    load_date_obj = (
        order.load_date if isinstance(order.load_date, datetime) 
        else datetime.strptime(order.load_date, "%Y-%m-%d %H:%M:%S") if order.load_date 
        else None
    )

    unload_date_obj = (
        order.unload_date if isinstance(order.unload_date, datetime) 
        else datetime.strptime(order.unload_date, "%Y-%m-%d %H:%M:%S") if order.unload_date 
        else None
    )

    # üÜï –§–æ—Ä–º–∏—Ä—É–µ–º `dates` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    load_first_date = load_date_obj.strftime("%Y-%m-%d") if load_date_obj else None
    load_time = load_date_obj.strftime("%H:%M") if load_date_obj else None

    load_dates = {
        "type": "from-date",
        "time": {
            "type": "bounded",
            "start": load_time,
            "end": load_time,
            "offset": "+00:00"
        },
        "first_date": load_first_date,
        "last_date": load_first_date
    }

    # üÜï –§–æ—Ä–º–∏—Ä—É–µ–º `dates` –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    unload_first_date = unload_date_obj.strftime("%Y-%m-%d") if unload_date_obj else None
    unload_time = unload_date_obj.strftime("%H:%M") if unload_date_obj else None

    unload_dates = {
        "first_date": unload_first_date,
        "last_date": unload_first_date,
        "time": {
            "type": "round-the-clock" if unload_time is None else "bounded",
            "start": unload_time,
            "end": unload_time,
            "offset": "+00:00"
        }
    }

    # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π `payment`
    if ati_price:
        rate_without_nds = math.floor(ati_price / 1.2 / 100) * 100  # –£–±–∏—Ä–∞–µ–º 20% –ù–î–°

        payment = {
            "type": "without-bargaining",
            "hide_counter_offers": True,
            "direct_offer": True,
            "payment_mode": {
                "type": "delayed-payment",
                "payment_delay_days": payment_days   
            },
            "currency_type": 1,
            "rate_with_vat": ati_price,  
            "rate_without_vat": rate_without_nds 
        }
    else:
        payment = {
            "type": "rate-request",
            "hide_counter_offers": True,
            "direct_offer": True,
            "payment_mode": {
                "type": "delayed-payment",
                "payment_delay_days": payment_days  
            },
            "currency_type": 1,
            "rate_with_vat_available": True,
            "rate_without_vat_available": True
        }

    # –î–æ–±–∞–≤–ª—è–µ–º `note`
    note = "–ê—É–∫—Ü–∏–æ–Ω" if order.order_type == "AUCTION" else ""

    return {
        "external_id": order.external_no,
        "cargo_id": order.cargo_id,  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì —Ç–µ–ø–µ—Ä—å cargo_id –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∑–∞–∫–∞–∑–∞
        "loading_city_id": loading_city_id,
        "unloading_city_id": unloading_city_id,
        "loading_address": order.loading_address or"",
        "unloading_address": order.unloading_address or "",
        "cargo_name": order.cargo_name or "–ì—Ä—É–∑",
        "weight": weight,
        "volume": volume,
        "logist_id": logist_id,
        "ati_price": ati_price,
        "note": note,
        "payment": payment,
        "loading_dates": load_dates,  # üÜï –î–æ–±–∞–≤–∏–ª–∏ –¥–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
        "unloading_dates": unload_dates,  # üÜï –î–æ–±–∞–≤–∏–ª–∏ –¥–∞—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        "body_types": body_types,  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–∫–∏, –∞ –Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        "body_loading": body_loading,
        "body_unloading": body_unloading
    }